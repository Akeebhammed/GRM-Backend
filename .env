24KAcPuWti9vu1lR

<template>
  <div>
    <div v-for="item in data" :key="item._id">{{ item.name }}</div>
    <div>
      <button :disabled="page === 1" @click="prevPage">Previous</button>
      <span>{{ page }}</span>
      <button :disabled="page === totalPages" @click="nextPage">Next</button>
    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      data: [],
      page: 1,
      limit: 10,
      total: 0,
      totalPages: 1,
    };
  },
  async mounted() {
    await this.fetchData();
  },
  methods: {
    async fetchData() {
      try {
        const res = await axios.get('/api/data', {
          params: { page: this.page, limit: this.limit },
        });
        this.data = res.data.data;
        this.page = res.data.page;
        this.limit = res.data.limit;
        this.total = res.data.total;
        this.totalPages = res.data.totalPages;
      } catch (err) {
        console.error(err);
      }
    },
    async prevPage() {
      if (this.page > 1) {
        this.page--;
        await this.fetchData();
      }
    },
    async nextPage() {
      if (this.page < this.totalPages) {
        this.page++;
        await this.fetchData();
      }
    },
  },
};
</script>


const express = require('express');
const router = express.Router();
const Data = require('../models/data');

router.get('/data', async (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 10;
  const skip = (page - 1) * limit;
  const sort = req.query.sort || '-createdAt'; // Default sorting by descending order of createdAt field
  const filter = req.query.filter || {}; // Default empty filter

  try {
    const data = await Data.find(filter).sort(sort).skip(skip).limit(limit);
    const total = await Data.countDocuments(filter);
    const totalPages = Math.ceil(total / limit);

    res.json({ data, page, limit, total, totalPages });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'Internal server error' });
  }
});

module.exports = router;

const express = require('express');
const router = express.Router();
const Book = require('../models/book');

// search route
router.get('/search', async (req, res) => {
  const query = req.query.q;
  const books = await Book.find({ $or: [
    { title: { $regex: query, $options: 'i' } },
    { author: { $regex: query, $options: 'i' } },
    { genre: { $regex: query, $options: 'i' } }
  ]});
  res.json(books);
});

// sort route
router.get('/sort', async (req, res) => {
  const sortBy = req.query.sortBy || 'title';
  const sortOrder = req.query.sortOrder || 'asc';
  const books = await Book.find().sort([[sortBy, sortOrder]]);
  res.json(books);
});

// filter route
router.get('/filter', async (req, res) => {
  const genre = req.query.genre;
  const fromYear = req.query.fromYear;
  const toYear = req.query.toYear;
  const query = {};
  if (genre) {
    query.genre = genre;
  }
  if (fromYear && toYear) {
    query.published = { $gte: fromYear, $lte: toYear };
  } else if (fromYear) {
    query.published = { $gte: fromYear };
  } else if (toYear) {
    query.published = { $lte: toYear };
  }
  const books = await Book.find(query);
  res.json(books);
});

// pagination route
router.get('/pagination', async (req, res) => {
  const page = parseInt(req.query.page) || 1;
  const limit = parseInt(req.query.limit) || 10;
  const skip = (page - 1) * limit;
  const total = await Book.countDocuments();
  const totalPages = Math.ceil(total / limit);
  const books = await Book.find().skip(skip).limit(limit);
  res.json({
    page,
    limit,
    totalPages,
    total,
    data: books
  });
});

module.exports = router;


<template>
  <div>
    <div class="row mb-3">
      <div class="col-md-4">
        <b-form-input v-model="search" placeholder="Search"></b-form-input>
      </div>
      <div class="col-md-4">
        <b-form-select v-model="sortBy" :options="sortOptions" placeholder="Sort By"></b-form-select>
      </div>
      <div class="col-md-4">
        <b-form-select v-model="genre" :options="genreOptions" placeholder="Filter By Genre"></b-form-select>
        <b-form-input v-model="fromYear" placeholder="From Year"></b-form-input>
        <b-form-input v-model="toYear" placeholder="To Year"></b-form-input>
        <b-button @click="filterBooks" variant="primary">Filter</b-button>
      </div>
    </div>
    <div class="row">
      <div class="col-md-12">
        <b-pagination v-model="currentPage" :total-rows="totalBooks" :per-page="perPage" align="center" class="my-3"></b-pagination>
        <b-table :items="books" :fields="bookFields" :sort-by.sync="sortBy" :sort-desc.sync="sortOrderDesc"></b-table>
        <b-pagination v-model="currentPage" :total-rows="totalBooks" :per-page="perPage" align="center" class="my-3"></b-pagination>
      </div>
    </div>
  </div>
</template>

<script>
import axios from 'axios';

export default {
  data() {
    return {
      books: [],
      totalBooks: 0,
      perPage: 10,
      currentPage: 1,
      search: '',
      sortBy: 'title',
      sortOrderDesc: false,
      genre: '',
      fromYear: '',
      toYear: '',
      bookFields: [
        { key: 'title', sortable: true },
        { key: 'author', sortable: true },
        { key: 'genre', sortable: true },
        { key: 'published', sortable: true },
        { key: 'pages', sortable: true }
      ]
    };
  },
  computed: {
    sortOptions() {
      return [
        { value: 'title', text: 'Title' },
        { value: 'author', text: 'Author' },
        { value: 'genre', text: 'Genre' },
        { value: 'published', text: 'Published' },
        { value: 'pages', text: 'Pages' }
      ];
    },
    genreOptions() {
      return [
        { value: '', text: 'All Genres' },
        { value: 'Fiction', text: 'Fiction' },
        { value: 'Non-Fiction', text: 'Non-Fiction' }
      ];
    }
  },
  methods: {
    getBooks() {
      axios.get(`/api/books/pagination?page=${this.currentPage}&limit=${this.perPage}&sortBy

methods: {
  // ...
  filterBooks() {
    let params = {
      genre: this.genre,
      fromYear: this.fromYear,
      toYear: this.toYear
    };
    axios.get('/api/books/filter', { params: params }).then(response => {
      this.books = response.data;
      this.totalBooks = this.books.length;
    });
  }
}

data() {
  return {
    selectedValue: null,
    backendData: null
  }
},
watch: {
  selectedValue: function(newVal) {
    axios.get('/backend/api/endpoint', {
      params: {
        selectedValue: newVal
      }
    })
    .then(response => {
      this.backendData = response.data;
    })
    .catch(error => {
      console.log(error);
    });
  }
}

